[build-system]
build-backend = "hatchling.build"
requires = ["hatchling"]


[project]
name = "{{ cookiecutter.project_name }}"
version = "0.0.1"
description = "{{ cookiecutter.project_description }}"
readme = "README.md"
requires-python = ">=3.8"
license = {file = "LICENSE"}
authors = [
    {name = "{{ cookiecutter.author_full_name }}"},
]
maintainers = [
    {name = "{{ cookiecutter.author_full_name }}", email = "{{ cookiecutter.author_email }}"},
]
urls.Documentation = "https://{{ cookiecutter.project_name }}.readthedocs.io/"
urls.Source = "{{ cookiecutter.project_repo }}"
urls.Home-page = "{{ cookiecutter.project_repo }}"
dependencies = [
    "anndata",
    # for debug logging (referenced from the issue template)
    "session-info"
]

[project.optional-dependencies]
dev = [
    # CLI for bumping the version number
    "bump2version",
    "pre-commit",
    "twine>=4.0.2"
]
doc = [
    "sphinx>=4",
    "sphinx-book-theme>=0.3.3",
    "myst-nb",
    "sphinxcontrib-bibtex>=1.0.0",
    "sphinx-autodoc-typehints",
    # For notebooks
    "ipykernel",
    "ipython",
    "sphinx-copybutton",
]
test = [
    "pytest",
    "pytest-cov",
]

{% if cookiecutter.project_name.lower().replace('-', '_') != cookiecutter.package_name -%}
[tool.hatch.build.targets.wheel]
packages = ['src/{{ cookiecutter.package_name }}']

{% endif -%}

[tool.coverage.run]
source = ["{{ cookiecutter.package_name }}"]
omit = [
    "**/test_*.py",
]

[tool.pytest.ini_options]
testpaths = ["tests"]
xfail_strict = true
addopts = [
    "--import-mode=importlib",  # allow using test files with same name
]

[tool.black]
line-length = 120
target-version = ["py38"]

[tool.ruff]
line-length = 120
target-version = "py38"
extend-select = [
    "W",  # Pycodestyle warnings
    "I",  # isort
    "D",  # pydocstyle
    "B",  # flake8-bugbear
    "TID",  # flake8-tidy-imports
    "C4",  # flake8-comprehensions
    "BLE",  # flake8-blind-except
    "PTH",  # flake8-use-pathlib
]
ignore = [
    # line break before a binary operator -> black does not adhere to PEP8
    "W503",
    # line break occured after a binary operator -> black does not adhere to PEP8
    "W504",
    # line too long -> we accept long comment lines; black gets rid of long code lines
    "E501",
    # whitespace before : -> black does not adhere to PEP8
    "E203",
    # line break before binary operator -> black does not adhere to PEP8
    "W503",
    # missing whitespace after ,', ';', or ':' -> black does not adhere to PEP8
    "E231",
    # continuation line over-indented for hanging indent -> black does not adhere to PEP8
    "E126",
    # too many leading '#' for block comment -> this is fine for indicating sections
    "E262",
    # Do not assign a lambda expression, use a def -> lambda expression assignments are convenient
    "E731",
    # allow I, O, l as variable names -> I is the identity matrix
    "E741",
    # Missing docstring in public package
    "D104",
    # Missing docstring in public module
    "D100",
    # Missing docstring in __init__
    "D107",
    # Errors from function calls in argument defaults. These are fine when the result is immutable.
    "B008",
    # Missing docstring in magic method
    "D105",
    # format string does contain unindexed parameters
    "P101",
    # first line should end with a period [Bug: doesn't work with single-line docstrings]
    "D400",
    # First line should be in imperative mood; try rephrasing
    "D401",
]
exclude = [".git", "__pycache__", "build", "docs/_build", "dist"]

# TODO: flake8-rst-docstrings
# rst-roles = ["class", "func", "ref", "cite:p", "cite:t"]
# rst-directives = ["envvar", "exception"]
# rst-substitutions = ["version"]
# extend-ignore = ["RST307"]

[tool.ruff.per-file-ignores]
"docs/*" = ["I"]
"tests/*" = ["D"]
"*/__init__.py" = ["F401"]

# [tool.ruff.black]  # all setting set in [tool.ruff]
# [tool.ruff.isort]  # conforms to black by default

[tool.jupytext]
formats = "ipynb,md"

[tool.cruft]
skip = [
    "tests",
    "src/**/__init__.py",
    "src/**/basic.py",
    "docs/api.md",
    "docs/changelog.md",
    "docs/references.bib",
    "docs/references.md",
    "docs/notebooks/example.ipynb"
]
